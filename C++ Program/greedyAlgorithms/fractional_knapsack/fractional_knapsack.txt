Problem Introduction
  A thief finds much more loot than his bag can fit. Help him to find the most valuable
  combination of items assuming that any fraction of a loot item can be put into his bag.
  
Problem Description
  Task : The goal of this code problem is to implement an algorithm for the fractional knapsack
         problem.

  Input Format : The first line of the input contains the number n of items and the capacity W
                 of a knapsack. The next n lines define the values and weights of the items.
                 The i-th line contains integers vi and wi the value and the weight of i-th item,
                 respectively. 
                 
  Constarints :  1 ≤ n ≤ 10^3, 0 ≤ W ≤ 2·10^6; 0 ≤ vi ≤ 2·10^6, 0 < wi ≤ 2·10^6 for all 1 ≤ i ≤ n.
                 All the numbers are integers.
                 
  Output Format : Output the maximal value of fractions of items that fit into the knapsack. The 
                  absolute value of the difference between the answer of your program and the 
                  optimal value should be at most 10−3. To ensure this, output your answer with at
                  least four digits after the decimal point (otherwise your answer, while being 
                  computed correctly, can turn out to be wrong because of rounding issues).
                 
  Time Limit : 1 sec
  
  Memory Limit : 512MB
  
Sample Output 
   Input : 
            3 50
            60 20
            100 50
            120 30
            
   Output :
            180.0000
            
   Explanation :  To achieve the value 180, we take the first item and the third item into the bag.   
   
   
Source : Algorithmic ToolBox by University of California San Diego &
         National Research University Higher School of Economics   (Coursera)
         
         Programming Assinment (Week 3)
